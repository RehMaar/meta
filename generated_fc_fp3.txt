'((read vs0)
  ((label 95)
   (:= pending (list (pair 'init vs0)))
   (:= marked '())
   (:= residual-code (list (generate-read '(read prog input) vs0)))
   (:= pp (caar pending))
   (:= vs (cdar pending))
   (:= pending (cdr pending))
   (:= label (pair pp vs))
   (if (elem? label marked) (label 94) (label 91)))
  ((label 94) (if (null? pending) (label 93) (label 92)))
  ((label 93) (return (reverse residual-code)))
  ((label 92)
   (:= pp (caar pending))
   (:= vs (cdar pending))
   (:= pending (cdr pending))
   (:= label (pair pp vs))
   (if (elem? label marked) (label 94) (label 91)))
  ((label 91)
   (:= marked (cons (pair pp vs) marked))
   (:= code-block '())
   (if (equal? pp 'init) (label 90) (label 5)))
  ((label 90)
   (:=
    code-block
    (extend (generate-assign 'ctx '(zip (cdar prog) input) vs) code-block))
   (:= vs (update vs 'bb (reduce '(cdadr prog) vs)))
   (:= vs (update vs 'stmt (reduce '(car bb) vs)))
   (:= vs (update vs 'bb (reduce '(cdr bb) vs)))
   (if (reduce '(equal? ':= (car stmt)) vs) (label 89) (label 82)))
  ((label 89)
   (:=
    code-block
    (extend
     (generate-assign
      'ctx
      '(update ctx (second stmt) (intrp-expr ctx (third stmt)))
      vs)
     code-block))
   (if (reduce '(null? bb) vs) (label 88) (label 6)))
  ((label 88)
   (:= code-block (extend (generate-return ''ERROR vs) code-block))
   (:= residual-code (cons (cons label (reverse code-block)) residual-code))
   (if (null? pending) (label 87) (label 86)))
  ((label 87) (return (reverse residual-code)))
  ((label 86)
   (:= pp (caar pending))
   (:= vs (cdar pending))
   (:= pending (cdr pending))
   (:= label (pair pp vs))
   (if (elem? label marked) (label 85) (label 84)))
  ((label 85) (if (null? pending) (label 87) (label 86)))
  ((label 84)
   (:= marked (cons (pair pp vs) marked))
   (:= code-block '())
   (if (equal? pp 'init) (label 83) (label 65)))
  ((label 83)
   (:=
    code-block
    (extend (generate-assign 'ctx '(zip (cdar prog) input) vs) code-block))
   (:= vs (update vs 'bb (reduce '(cdadr prog) vs)))
   (:= vs (update vs 'stmt (reduce '(car bb) vs)))
   (:= vs (update vs 'bb (reduce '(cdr bb) vs)))
   (if (reduce '(equal? ':= (car stmt)) vs) (label 89) (label 82)))
  ((label 82)
   (if (reduce '(equal? 'goto (car stmt)) vs) (label 81) (label 80)))
  ((label 81)
   (:= vs (update vs 'bb (reduce '(lookup prog (second stmt)) vs)))
   (:= vs (update vs 'stmt (reduce '(car bb) vs)))
   (:= vs (update vs 'bb (reduce '(cdr bb) vs)))
   (if (reduce '(equal? ':= (car stmt)) vs) (label 89) (label 82)))
  ((label 80) (if (reduce '(equal? 'if (car stmt)) vs) (label 79) (label 13)))
  ((label 79)
   (:=
    pending
    (unite (list (pair 'handle-if-then vs) (pair 'handle-if-else vs)) pending))
   (:=
    code-block
    (extend
     (generate-if
      '(intrp-expr ctx (second stmt))
      vs
      'handle-if-then
      'handle-if-else)
     code-block))
   (:= residual-code (cons (cons label (reverse code-block)) residual-code))
   (if (null? pending) (label 78) (label 77)))
  ((label 78) (return (reverse residual-code)))
  ((label 77)
   (:= pp (caar pending))
   (:= vs (cdar pending))
   (:= pending (cdr pending))
   (:= label (pair pp vs))
   (if (elem? label marked) (label 76) (label 75)))
  ((label 76) (if (null? pending) (label 78) (label 77)))
  ((label 75)
   (:= marked (cons (pair pp vs) marked))
   (:= code-block '())
   (if (equal? pp 'init) (label 74) (label 73)))
  ((label 74)
   (:=
    code-block
    (extend (generate-assign 'ctx '(zip (cdar prog) input) vs) code-block))
   (:= vs (update vs 'bb (reduce '(cdadr prog) vs)))
   (:= vs (update vs 'stmt (reduce '(car bb) vs)))
   (:= vs (update vs 'bb (reduce '(cdr bb) vs)))
   (if (reduce '(equal? ':= (car stmt)) vs) (label 89) (label 82)))
  ((label 73) (if (equal? pp 'handle-if-then) (label 72) (label 16)))
  ((label 72)
   (:= vs (update vs 'bb (reduce '(lookup prog (third stmt)) vs)))
   (:= vs (update vs 'stmt (reduce '(car bb) vs)))
   (:= vs (update vs 'bb (reduce '(cdr bb) vs)))
   (if (reduce '(equal? ':= (car stmt)) vs) (label 71) (label 63)))
  ((label 71)
   (:=
    code-block
    (extend
     (generate-assign
      'ctx
      '(update ctx (second stmt) (intrp-expr ctx (third stmt)))
      vs)
     code-block))
   (if (reduce '(null? bb) vs) (label 70) (label 17)))
  ((label 70)
   (:= code-block (extend (generate-return ''ERROR vs) code-block))
   (:= residual-code (cons (cons label (reverse code-block)) residual-code))
   (if (null? pending) (label 69) (label 68)))
  ((label 69) (return (reverse residual-code)))
  ((label 68)
   (:= pp (caar pending))
   (:= vs (cdar pending))
   (:= pending (cdr pending))
   (:= label (pair pp vs))
   (if (elem? label marked) (label 67) (label 66)))
  ((label 67) (if (null? pending) (label 69) (label 68)))
  ((label 66)
   (:= marked (cons (pair pp vs) marked))
   (:= code-block '())
   (if (equal? pp 'init) (label 83) (label 65)))
  ((label 65) (if (equal? pp 'handle-if-then) (label 64) (label 20)))
  ((label 64)
   (:= vs (update vs 'bb (reduce '(lookup prog (third stmt)) vs)))
   (:= vs (update vs 'stmt (reduce '(car bb) vs)))
   (:= vs (update vs 'bb (reduce '(cdr bb) vs)))
   (if (reduce '(equal? ':= (car stmt)) vs) (label 71) (label 63)))
  ((label 63)
   (if (reduce '(equal? 'goto (car stmt)) vs) (label 62) (label 61)))
  ((label 62)
   (:= vs (update vs 'bb (reduce '(lookup prog (second stmt)) vs)))
   (:= vs (update vs 'stmt (reduce '(car bb) vs)))
   (:= vs (update vs 'bb (reduce '(cdr bb) vs)))
   (if (reduce '(equal? ':= (car stmt)) vs) (label 71) (label 63)))
  ((label 61) (if (reduce '(equal? 'if (car stmt)) vs) (label 60) (label 55)))
  ((label 60)
   (:=
    pending
    (unite (list (pair 'handle-if-then vs) (pair 'handle-if-else vs)) pending))
   (:=
    code-block
    (extend
     (generate-if
      '(intrp-expr ctx (second stmt))
      vs
      'handle-if-then
      'handle-if-else)
     code-block))
   (:= residual-code (cons (cons label (reverse code-block)) residual-code))
   (if (null? pending) (label 59) (label 58)))
  ((label 59) (return (reverse residual-code)))
  ((label 58)
   (:= pp (caar pending))
   (:= vs (cdar pending))
   (:= pending (cdr pending))
   (:= label (pair pp vs))
   (if (elem? label marked) (label 57) (label 56)))
  ((label 57) (if (null? pending) (label 59) (label 58)))
  ((label 56)
   (:= marked (cons (pair pp vs) marked))
   (:= code-block '())
   (if (equal? pp 'init) (label 74) (label 73)))
  ((label 55)
   (if (reduce '(equal? 'return (car stmt)) vs) (label 54) (label 21)))
  ((label 54)
   (:=
    code-block
    (extend (generate-return '(intrp-expr ctx (second stmt)) vs) code-block))
   (:= residual-code (cons (cons label (reverse code-block)) residual-code))
   (if (null? pending) (label 53) (label 52)))
  ((label 53) (return (reverse residual-code)))
  ((label 52)
   (:= pp (caar pending))
   (:= vs (cdar pending))
   (:= pending (cdr pending))
   (:= label (pair pp vs))
   (if (elem? label marked) (label 51) (label 50)))
  ((label 51) (if (null? pending) (label 53) (label 52)))
  ((label 50)
   (:= marked (cons (pair pp vs) marked))
   (:= code-block '())
   (if (equal? pp 'init) (label 49) (label 48)))
  ((label 49)
   (:=
    code-block
    (extend (generate-assign 'ctx '(zip (cdar prog) input) vs) code-block))
   (:= vs (update vs 'bb (reduce '(cdadr prog) vs)))
   (:= vs (update vs 'stmt (reduce '(car bb) vs)))
   (:= vs (update vs 'bb (reduce '(cdr bb) vs)))
   (if (reduce '(equal? ':= (car stmt)) vs) (label 89) (label 82)))
  ((label 48) (if (equal? pp 'handle-if-then) (label 47) (label 46)))
  ((label 47)
   (:= vs (update vs 'bb (reduce '(lookup prog (third stmt)) vs)))
   (:= vs (update vs 'stmt (reduce '(car bb) vs)))
   (:= vs (update vs 'bb (reduce '(cdr bb) vs)))
   (if (reduce '(equal? ':= (car stmt)) vs) (label 71) (label 63)))
  ((label 46) (if (equal? pp 'handle-if-else) (label 45) (label 22)))
  ((label 45)
   (:= vs (update vs 'bb (reduce '(lookup prog (fourth stmt)) vs)))
   (:= vs (update vs 'stmt (reduce '(car bb) vs)))
   (:= vs (update vs 'bb (reduce '(cdr bb) vs)))
   (if (reduce '(equal? ':= (car stmt)) vs) (label 44) (label 37)))
  ((label 44)
   (:=
    code-block
    (extend
     (generate-assign
      'ctx
      '(update ctx (second stmt) (intrp-expr ctx (third stmt)))
      vs)
     code-block))
   (if (reduce '(null? bb) vs) (label 43) (label 38)))
  ((label 43)
   (:= code-block (extend (generate-return ''ERROR vs) code-block))
   (:= residual-code (cons (cons label (reverse code-block)) residual-code))
   (if (null? pending) (label 42) (label 41)))
  ((label 42) (return (reverse residual-code)))
  ((label 41)
   (:= pp (caar pending))
   (:= vs (cdar pending))
   (:= pending (cdr pending))
   (:= label (pair pp vs))
   (if (elem? label marked) (label 40) (label 39)))
  ((label 40) (if (null? pending) (label 42) (label 41)))
  ((label 39)
   (:= marked (cons (pair pp vs) marked))
   (:= code-block '())
   (if (equal? pp 'init) (label 83) (label 65)))
  ((label 38)
   (:= vs (update vs 'stmt (reduce '(car bb) vs)))
   (:= vs (update vs 'bb (reduce '(cdr bb) vs)))
   (if (reduce '(equal? ':= (car stmt)) vs) (label 44) (label 37)))
  ((label 37)
   (if (reduce '(equal? 'goto (car stmt)) vs) (label 36) (label 35)))
  ((label 36)
   (:= vs (update vs 'bb (reduce '(lookup prog (second stmt)) vs)))
   (:= vs (update vs 'stmt (reduce '(car bb) vs)))
   (:= vs (update vs 'bb (reduce '(cdr bb) vs)))
   (if (reduce '(equal? ':= (car stmt)) vs) (label 44) (label 37)))
  ((label 35) (if (reduce '(equal? 'if (car stmt)) vs) (label 34) (label 29)))
  ((label 34)
   (:=
    pending
    (unite (list (pair 'handle-if-then vs) (pair 'handle-if-else vs)) pending))
   (:=
    code-block
    (extend
     (generate-if
      '(intrp-expr ctx (second stmt))
      vs
      'handle-if-then
      'handle-if-else)
     code-block))
   (:= residual-code (cons (cons label (reverse code-block)) residual-code))
   (if (null? pending) (label 33) (label 32)))
  ((label 33) (return (reverse residual-code)))
  ((label 32)
   (:= pp (caar pending))
   (:= vs (cdar pending))
   (:= pending (cdr pending))
   (:= label (pair pp vs))
   (if (elem? label marked) (label 31) (label 30)))
  ((label 31) (if (null? pending) (label 33) (label 32)))
  ((label 30)
   (:= marked (cons (pair pp vs) marked))
   (:= code-block '())
   (if (equal? pp 'init) (label 74) (label 73)))
  ((label 29)
   (if (reduce '(equal? 'return (car stmt)) vs) (label 28) (label 23)))
  ((label 28)
   (:=
    code-block
    (extend (generate-return '(intrp-expr ctx (second stmt)) vs) code-block))
   (:= residual-code (cons (cons label (reverse code-block)) residual-code))
   (if (null? pending) (label 27) (label 26)))
  ((label 27) (return (reverse residual-code)))
  ((label 26)
   (:= pp (caar pending))
   (:= vs (cdar pending))
   (:= pending (cdr pending))
   (:= label (pair pp vs))
   (if (elem? label marked) (label 25) (label 24)))
  ((label 25) (if (null? pending) (label 27) (label 26)))
  ((label 24)
   (:= marked (cons (pair pp vs) marked))
   (:= code-block '())
   (if (equal? pp 'init) (label 49) (label 48)))
  ((label 23)
   (:= code-block (extend (generate-return ''ERROR vs) code-block))
   (:= residual-code (cons (cons label (reverse code-block)) residual-code))
   (if (null? pending) (label 42) (label 41)))
  ((label 22) (return (error "Some stupid error")))
  ((label 21)
   (:= code-block (extend (generate-return ''ERROR vs) code-block))
   (:= residual-code (cons (cons label (reverse code-block)) residual-code))
   (if (null? pending) (label 69) (label 68)))
  ((label 20) (if (equal? pp 'handle-if-else) (label 19) (label 18)))
  ((label 19)
   (:= vs (update vs 'bb (reduce '(lookup prog (fourth stmt)) vs)))
   (:= vs (update vs 'stmt (reduce '(car bb) vs)))
   (:= vs (update vs 'bb (reduce '(cdr bb) vs)))
   (if (reduce '(equal? ':= (car stmt)) vs) (label 44) (label 37)))
  ((label 18) (return (error "Some stupid error")))
  ((label 17)
   (:= vs (update vs 'stmt (reduce '(car bb) vs)))
   (:= vs (update vs 'bb (reduce '(cdr bb) vs)))
   (if (reduce '(equal? ':= (car stmt)) vs) (label 71) (label 63)))
  ((label 16) (if (equal? pp 'handle-if-else) (label 15) (label 14)))
  ((label 15)
   (:= vs (update vs 'bb (reduce '(lookup prog (fourth stmt)) vs)))
   (:= vs (update vs 'stmt (reduce '(car bb) vs)))
   (:= vs (update vs 'bb (reduce '(cdr bb) vs)))
   (if (reduce '(equal? ':= (car stmt)) vs) (label 44) (label 37)))
  ((label 14) (return (error "Some stupid error")))
  ((label 13)
   (if (reduce '(equal? 'return (car stmt)) vs) (label 12) (label 7)))
  ((label 12)
   (:=
    code-block
    (extend (generate-return '(intrp-expr ctx (second stmt)) vs) code-block))
   (:= residual-code (cons (cons label (reverse code-block)) residual-code))
   (if (null? pending) (label 11) (label 10)))
  ((label 11) (return (reverse residual-code)))
  ((label 10)
   (:= pp (caar pending))
   (:= vs (cdar pending))
   (:= pending (cdr pending))
   (:= label (pair pp vs))
   (if (elem? label marked) (label 9) (label 8)))
  ((label 9) (if (null? pending) (label 11) (label 10)))
  ((label 8)
   (:= marked (cons (pair pp vs) marked))
   (:= code-block '())
   (if (equal? pp 'init) (label 49) (label 48)))
  ((label 7)
   (:= code-block (extend (generate-return ''ERROR vs) code-block))
   (:= residual-code (cons (cons label (reverse code-block)) residual-code))
   (if (null? pending) (label 87) (label 86)))
  ((label 6)
   (:= vs (update vs 'stmt (reduce '(car bb) vs)))
   (:= vs (update vs 'bb (reduce '(cdr bb) vs)))
   (if (reduce '(equal? ':= (car stmt)) vs) (label 89) (label 82)))
  ((label 5) (if (equal? pp 'handle-if-then) (label 4) (label 3)))
  ((label 4)
   (:= vs (update vs 'bb (reduce '(lookup prog (third stmt)) vs)))
   (:= vs (update vs 'stmt (reduce '(car bb) vs)))
   (:= vs (update vs 'bb (reduce '(cdr bb) vs)))
   (if (reduce '(equal? ':= (car stmt)) vs) (label 71) (label 63)))
  ((label 3) (if (equal? pp 'handle-if-else) (label 2) (label 1)))
  ((label 2)
   (:= vs (update vs 'bb (reduce '(lookup prog (fourth stmt)) vs)))
   (:= vs (update vs 'stmt (reduce '(car bb) vs)))
   (:= vs (update vs 'bb (reduce '(cdr bb) vs)))
   (if (reduce '(equal? ':= (car stmt)) vs) (label 44) (label 37)))
  ((label 1) (return (error "Some stupid error"))))
